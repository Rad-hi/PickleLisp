; This `pickle script` contains the standard library for PickleLisp


; ------------------------------------------------------------
; LIST functions
; ------------------------------------------------------------

; Unpack a List `lst` for the function `func`
(fn {unpack func lst} {
  eval (join (list func) lst)
})

; Pack a List of values `& xs` for the function `func`
(fn {pack func & xs} {func xs})

; element lookup
(fn {st l} { eval (head l) })
(fn {nd l} { eval (head (tail l)) })
(fn {rd l} { eval (head (tail (tail l))) })

; recursive function to find the length of a list
(fn {len l} {
    if (== l nil)
    {0}
    {+ 1 (len (tail l))}
})

; recursive function to get the nth element
(fn {nth n l} {
    if (== n 0)
    {st l}
    {nth (- n 1) (tail l)}
})

; last item in a list
(fn {last l} {nth (- (len l) 1) l})

; take N elements from the beginning of a list
(fn {take n l} {
    if (== n 0)
    {nil}
    {join (head l) (take (- n 1) (tail l))}
})

; drop N items from the beginning of the list
(fn {drop n l} {
    if (== n 0)
    {l}
    {drop (- n 1) (tail l)}
})

; split list at N index
(fn {split n l} {list (take n l) (drop n l) })

; is x in list
(fn {in x l} {
    if (== l nil)
    {false}
    {
        if (== x (st l)) 
        {true}
        {in x (tail l)}
    }
})

; apply function to a list
(fn {map f l} {
    if (== l nil)
    {nil}
    {join (list (f (st l))) (map f (tail l))}
})

; apply a filter to a list
(fn {filter f l} {
    if (== l nil)
    {nil}
    {join (
        if (f (st l))
        {head l}
        {nil}) (filter f (tail l))
    }
})

; Perform Several things in Sequence
(fn {do & lst} {
  if (== lst nil)
    {nil}
    {last lst}
})

; Open new scope
; example:  let {do (= {x} 100) (x)}
; here, `x` would only exist within this call (since we used `put :: =`)
(fn {let b} {
  ((\ {_} b) ())
})

; Fold Left
; folds the contents of the list `l` into the base value `z` using f
(fn {foldl f z l} {
  if (== l nil)
    {z}
    {foldl f (f z (st l)) (tail l)}
})

(fn {sum l} {foldl + 0 l}) ; sums all elements of the list
(fn {mul l} {foldl * 1 l}) ; multiplies all the elements of the list


; ------------------------------------------------------------
; CONDITIONALS
; ------------------------------------------------------------

; select one case out of the available cases
; example use case would be:
;   (fn {month-day-suffix i} {
;     select
;       {(== i 0)  "st"}
;       {(== i 1)  "nd"}
;       {(== i 3)  "rd"}
;       {otherwise "th"}
;   })
(fn {select & cases} {
    if (== cases nil)
    {error "No selection found in cases"}
    {
        if (st (st cases))
        {nd (st (cases))}
        {unpack select (tail cases)}
    }
})
; Default Case
(def {otherwise} true)

; switch-case like construct
; example use case would be:
;   (fn {day-name x} {
;   case x
;       {0 "Monday"}
;       {1 "Tuesday"}
;       {2 "Wednesday"}
;       {3 "Thursday"}
;       {4 "Friday"}
;       {5 "Saturday"}
;       {6 "Sunday"}
;   })
(fn {case x & cases} {
    if (== cases nil)
    {error "No match found"}
    {
        if (== x (st (st cases)))
        {nd (st cases)}
        {unpack case (join (list x) (tail cases))}
    }
})

; ------------------------------------------------------------
; MISCELLANEOUS
; ------------------------------------------------------------

(fn {swap f a b} {f b a})
(fn {comp f g x} {f (g x)})  ; composes f and g -> f(g(x)) [mathematically speaking]


; ------------------------------------------------------------
; ALIASES
; ------------------------------------------------------------

(def {curry} unpack)
(def {uncurry} pack)
(fn {not x}   {! x})
(fn {or x y}  {|| x y})
(fn {and x y} {&& x y})